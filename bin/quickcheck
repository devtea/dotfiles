#!/bin/bash
# 
# A script to run a few quick checks on a host and report back the general status
#
# TODO
# - Better filtering of RO filesystems (eg from xen systems)
# - Remove distro print if neofetch exists
# - filter user from process grep/awks (eg apache user running php)

MEM=$(free | awk '/Mem/{ print $2 }')
CENTOS='  _____         __  ____  ____\n / ___/__ ___  / /_/ __ \\/ __/\n/ /__/ -_) _ \\/ __/ /_/ /\\ \\ \n\\___/\\__/_//_/\\__/\\____/___/'
CENTOS7='  _____         __  ____  ________\n / ___/__ ___  / /_/ __ \\/ __/_  /\n/ /__/ -_) _ \\/ __/ /_/ /\\ \\  / /\n\\___/\\__/_//_/\\__/\\____/___/ /_/'
UBUNTU='  __  ____             __\n / / / / /  __ _____  / /___ __\n/ /_/ / _ \\/ // / _ \\/ __/ // /\n\\____/_.__/\\_,_/_//_/\\__/\\_,_/'

#
# OS and Distro detection
#
UNAME="$(uname)"
DISTRO=''

case "$UNAME" in 
    Linux)
        CURRENT_OS='Linux'
        if [[ -f /etc/redhat-release ]]; then
            # CentOS, Fedora, Redhat
            if grep -q "CentOS" /etc/redhat-release; then
                DISTRO='CentOS'
                if grep -a "release 7" /etc/redhat-release; then
                    DISTRO='CentOS7'
                fi
            elif grep -q "Fedora" /etc/redhat-release; then
                DISTRO='Fedora'
            else
                DISTRO='RHEL'
            fi
        elif [[ -f /etc/pacman.conf ]]; then 
            DISTRO="Arch"
        else
            LSB=$(which lsb_release 2>/dev/null)
            if [[ ! "$LSB" = "lsb_release not found" ]]; then
                # Debian = 'Debian'
                # Ubuntu = 'Ubuntu'
                DISTRO="$(lsb_release -si)"
            fi
        fi
        ;;
    Darwin)
        CURRENT_OS='OS X';;
    CYGWIN*)
        CURRENT_OS='Cygwin'
        DISTRO='Windows'
        ;;
    FreeBSD)
        CURRENT_OS='FreeBSD';;
    NetBSD)
        CURRENT_OS='NetBSD';;
    OpenBSD)
        CURRENT_OS='OpenBSD';;
    SunOS)
        CURRENT_OS='Solaris';;
    *)
        CURRENT_OS="$UNAME";;
esac


#
# Color magicks
#
# If we are in a terminal
if test -t 1 ; then
    # do we support colors?
    ncolors=$(tput colors)
    if test -n "$ncolors" && test $ncolors -ge 8; then
        reset="\033[39m"
        red="\033[31m"
        green="\033[32m"
        yellow="\033[33m"
        blue="\033[34m"
        magenta="\033[35m"
        cyan="\033[36m"
        white="\033[37m"
    fi
fi

#
# Display basics
#
echo ""
echo -e "${green}Running quick checks${reset}"
case $DISTRO in 
    Ubuntu)
        echo -e "${cyan}${UBUNTU}${reset}"
        ;;
    CentOS)
        echo -e "${cyan}${CENTOS}${reset}"
        ;;
    CentOS7)
        echo -e "${yellow}${CENTOS7}${reset}"
        ;;
    *)
        echo -e "The local distro is ${cyan}${DISTRO}${reset}"
        ;;
esac
hostname -f
uptime | sed 's/^ //'

#
# Check for (almost) full filesystems
#
echo -e "${red}"
df -P | awk '{if (NR!=1 && ($3/$2*100)>90) { print $6, "is", $3/$2*100 "% full" }}'

#
# Check for read-only filesystems
#
if [[ $(sed 's/errors=remount-ro//g' /proc/mounts | grep -E '\bro\b' | grep -vE '/sys/fs/cgroup\b|iso9660' | awk '{ print $2, "Type:", $3, " (" $1 ")"  }' | wc -l) -gt 0 ]]; then
    echo "Read Only filesystems:"
    sed 's/errors=remount-ro//g' /proc/mounts | grep -E '\bro\b' | grep -vE '/sys/fs/cgroup\b' | awk '{ print $2, "Type:", $3, " (" $1 ")"  }'
    echo ""
fi

#
# Memory checks
#
if [[ $(free | wc -l) -eq 4 ]]; then 
    # old style free
    free | awk '/buffers\/cache/{ mem=$3/($3+$4)*100; if (mem>=90) {print "High memory usage:", mem "%" }}'
    free | awk '/Swap/{ swap=$3/$2*100; if (swap>=15) {print "High Swap usage:", swap "%" }}' 
else
    # new compact style free
    free | awk '/Mem/{ mem=$3/$2*100; if (mem>=90) {print "High memory usage:", mem "%" }}' 
    free | awk '/Swap/{ swap=$3/$2*100; if (swap>=15) {print "High Swap usage:", swap "%" }}' 
fi

#
# Service checks
#
echo -e "${reset}"

# apache is a special snowflake
if ps -ef | grep -iE 'apache|httpd|cgi' | grep -vE 'grep|bash -c|java' 2>&1 >/dev/null; then
    echo -e "${yellow}Apache process stats${reset}"
    ps aux | grep -iE 'apache|httpd|cgi' | grep -vE 'grep|bash -c|Contego|java' | awk -v color="$blue" -v reset="$reset" '{ sum+=$3; count++; } END { print color sum/count "%", reset "CPU average over", count, "processes\n" color sum "%", reset "CPU Total"  }'
    ps aux | grep -iE 'apache|httpd|cgi' | grep -vE 'grep|bash -c|Contego|java' | awk -v color="$blue" -v reset="$reset" -v mem="$MEM" '{ sum+=$6; count++; } END { print color sum/count/1024, reset "MB average over", count, "processes\n" color sum/1024, reset "MB Total\n" color sum/mem*100 "%" reset, "of",  mem/1024/1024, "GB total memory" }'
fi

# loop through our other interesting services
for simple in Tomcat Java Redis nginx php Gluster zabbix-server zabbix-agent Zookeeper Salt-Master Kafka Mongo Couchbase Ruby mySQL lighttpd haproxy rabbitmq postgres; do
    if ps -ef | grep -vE 'grep|bash -c|Contego' | grep -i "$simple" 2>&1 >/dev/null; then
        echo -e "${yellow}${simple} process stats${reset}"
        ps aux | grep -iE "$simple" | grep -vE 'grep|bash -c|Contego' | awk -v color="$blue" -v reset="$reset" '{ sum+=$3; count++; } END { print color sum/count "%", reset "CPU average over", count, "processes\n" color sum "%", reset "CPU Total"  }'
        ps aux | grep -iE "$simple" | grep -vE 'grep|bash -c|Contego' | awk -v color="$blue" -v reset="$reset" -v mem="$MEM" '{ sum+=$6; count++; } END { print color sum/count/1024, reset "MB average over", count, "processes\n" color sum/1024, reset "MB Total\n" color sum/mem*100 "%" reset, "of",  mem/1024/1024, "GB total memory" }'
    fi
done

if [ $(wc -l /etc/salt/grains | awk '{ print $1 }') -gt 0 ]; then
    echo ""
    echo -e "${yellow}Salt Grains${reset}"
    less -FX /etc/salt/grains
fi

echo ""
echo -e "${green}Quick checks finished.${reset}"
