#!/bin/bash
# Not so short script to wrap ssh and push some essential dotfiles / pubkey to remote hosts on first connect.
# Config LOCAL_USERNAME with your local account username
LOCAL_USERNAME=""
# config FQDN with your search path, e.g. ".company.com"
FQDN=""
CONNECT=$1
EXIT_CODE=0
FIRST_CONNECT=0
KNOWN_HOST=1
LOCAL_USER=1

update_dotfiles() {
    local EXIT=0
    cd ~
    if ! rsync --progress -a ~/.vimrc ~/.vim ~/.config ~/.bashrc ~/.dir_colors ~/.commonrc ~/.distro_detect ~/.exports ~/.functions ~/.aliases ~/.Xresources ~/.bash_profile ~/.terminfo --exclude-from=.essentials_exclude "${CONNECT}":~/ ; then 
        local EXIT=0
        echo "Unable to rsync files. Falling back to throwing tarballs"
        cd ~
        tar -cz --exclude-from=.essentials_exclude_tar -f /tmp/dotfiles.tgz .vimrc .vim ~/.config .bashrc .dir_colors .commonrc .distro_detect .exports .functions .aliases .Xresources .bash_profile .terminfo || local EXIT 1
        cd -
        scp /tmp/dotfiles.tgz "${CONNECT}":~/ || local EXIT=1
        rm -f /tmp/dotfiles.tgz
    fi
    cd -
    return $EXIT
}

# If our argument comes in as user@host we need to split out the hostname. 
# else it's coming in as just host so take that is it is.
if [[ $CONNECT == *@* ]]; then
  # Note: this assumes the variable (first argument) has no spaces
  arr=(${CONNECT//@/ })
  SSH_USER=${arr[0]}
  REMOTE_HOST=${arr[1]}
else
  REMOTE_HOST=$CONNECT
fi

# check .ssh/known-hosts for the host specified. This has to be checked early, but will
# be used later
if grep -i "$REMOTE_HOST" ~/.ssh/known_hosts &>/dev/null ; then
    KNOWN_HOST=0
fi

# check for local user access. new servers only, cent 7 +
if ssh -T -o PasswordAuthentication=no ${LOCAL_USERNAME}@${REMOTE_HOST} "exit" 2>/dev/null; then
    LOCAL_USER=0
fi

# check for an domain connected machine
if [[ LOCAL_USER -ne 0 ]] && ! [[ $REMOTE_HOST == *fisdap* ]] && ! [[ $REMOTE_HOST == *medhub* ]]; then
    REMOTE_HOST=${REMOTE_HOST}${FQDN}
    CONNECT=${CONNECT}${FQDN}
    # if we can successfully auth with our key, this is not our first connect
    if ssh -T -o PasswordAuthentication=no ${REMOTE_HOST} "exit" 2>/dev/null; then
        FIRST_CONNECT=1
    fi
else
    # if our host is not on the domain, check .ssh/known-hosts for the host specified
    if [[ KNOWN_HOST -eq 0 ]]; then
        FIRST_CONNECT=1
    fi
fi

if [[ FIRST_CONNECT -eq 0 ]]; then
    # If we have a defined user and that user is root
    if [ ! -z $SSH_USER ] && [ "$SSH_USER" = "root" ]; then 
        # Just connect, don't try to futz with the environment
        ssh -t $CONNECT "$(< ~/bin/quickcheck); bash --login" || EXIT_CODE=2
        # Remove our host from the known hosts list after connecting
        sed -i "/${REMOTE_HOST}/d" ~/.ssh/known_hosts
        exit $EXIT_CODE
    # Just connect, don't try to futz with the environment or remove our known_hosts entry
    elif [[ $REMOTE_HOST == *"medhub"* ]]; then
        :
    else
        # test if this is a new host with the local account 
        if [[ LOCAL_USER -eq 0 ]]; then
            echo "Copying essential dotfiles"
            if ! update_dotfiles; then
                echo "WARNING: Unable to rsync files"
            fi

        # Legacy connections to domain joined machines
        elif ssh-copy-id -i ~/.ssh/id_rsa.pub $CONNECT; then
            echo "Ensuring .ssh context"
            # we must include an "or exit 0" in our cmd so that the absense of the 
            # redhat-release file doesn't end our script prematurely
            /bin/ssh -t -t $CONNECT '[[ -e /etc/redhat-release ]] && grep "release 6" /etc/redhat-release >/dev/null && sudo chcon -R -t ssh_home_t ~/.ssh || exit 0' || exit 5

            echo "Copying essential dotfiles"
            if ! update_dotfiles; then
                echo "WARNING: Unable to rsync files"
            fi
        else
            echo "WARNING: Connection error"
            sed -i "/${REMOTE_HOST}/d" ~/.ssh/known_hosts
            exit 3
        fi
    fi
fi

# Lastly connect
if [[ LOCAL_USER -eq 0 ]]; then
    ssh -t -o passwordauthentication=no ${LOCAL_USERNAME}@${REMOTE_HOST} "$(< ~/bin/quickcheck); bash --login"
elif ! [ -z $SSH_USER ]; then 
    ssh -t ${SSH_USER}@${REMOTE_HOST} "$(< ~/bin/quickcheck); bash --login"
else
    ssh -t ${REMOTE_HOST} "$(< ~/bin/quickcheck); bash --login"
fi
